<?xml version="1.0"?>

<!-- (C) Copyright 2014, MongoDB, Inc. -->
<project name="agent-packaging" basedir="./" xmlns:aspectj="antlib:org.aspectj">
    <property environment="env"/>
    <property name="build.dir" location="build"/>

    <target name="build.dir.make">
        <mkdir dir="${build.dir}"/>
    </target>
    
    <!-- START go -->
    <property name="go.root" value="${env.GOROOT}"/>
    <property name="go.path" value="${build.dir}/go-dependencies"/>
    <property name="go.arch" value="amd64"/>

    <macrodef name="gpm">
        <attribute name="deps"/>
        <sequential>
            <mkdir dir="${go.path}"/>
            <echo message="Getting Go dependencies..."/>
            <echo message="GOROOT - ${go.root}"/>
            <echo message="GOPATH - ${go.path}"/>
            <echo message="GOARCH - ${go.arch}"/>

            <exec executable="bash" failonerror="true">
                <arg value="../gpm"/>
                <arg value="install"/>
                <arg value="@{deps}"/>
                <env key="GOROOT" value="${go.root}"/>
                <env key="GOPATH" value="${go.path}"/>
                <env key="GOARCH" value="${go.arch}"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="go-build">
        <attribute name="sourcedir"/>
        <attribute name="version"/>
        <attribute name="versionfile"/>
        <attribute name="mainfile"/>
        <attribute name="destfile"/>
        <attribute name="tags"/>

        <sequential>
            <copy todir="${go.path}/src">
                <fileset dir="@{sourcedir}/" includes="**"/>
            </copy>

            <replaceregexp file="${go.path}/src@{versionfile}"
                match="const AGENT_VERSION = &quot;(.*)&quot;"
                replace="const AGENT_VERSION = &quot;@{version}&quot;"
                byline="true"/>

            <exec executable="${env.GOROOT}/bin/go" failonerror="true">
                <arg value="build"/>
                <arg value="-o"/>
                <arg value="@{destfile}"/>
                <arg value="-tags"/>
                <arg value="'@{tags}'"/>
                <arg value="-x"/>
                <arg value="${go.path}/src@{mainfile}"/>

                <env key="GOROOT" value="${go.root}"/>
                <env key="GOPATH" value="${go.path}"/>
                <env key="GOARCH" value="${go.arch}"/>
            </exec>
        </sequential>
    </macrodef>
    <!-- END go -->

    <!-- START wix -->
    <macrodef name="wix-build">
        <attribute name="localefile"/>
        <attribute name="packagefile"/>
        <attribute name="objectdir"/>
        <attribute name="archivedir"/>
        <attribute name="sourcedir"/>
        <element name="sourcefiles"/>

        <sequential>
            <delete dir="@{objectdir}"/>
            <exec executable="candle" failonerror="true">
                <arg value="-nologo"/>
                <sourcefiles/>
                <arg value="-dGOARCH=${go.arch}"/>
                <arg value="-dVERSION=${munin-agent.version}"/>
                <arg value="-ext"/>
                <arg value="WixFirewallExtension"/>
                <arg value="-o"/>
                <arg value="@{objectdir}/"/>
            </exec>
            <exec executable="light" failonerror="true">
                <arg value="-nologo"/>
                <arg value="-sval"/>
                <arg value="@{objectdir}/*.wixobj"/>
                <arg value="-loc"/>
                <arg value="@{localefile}"/>
                <arg value="-ext"/>
                <arg value="WixUIExtension"/>
                <arg value="-ext"/>
                <arg value="WixFirewallExtension"/>
                <arg value="-o"/>
                <arg value="@{packagefile}"/>
                <arg value="-b"/>
                <arg value="@{archivedir}"/>
                <arg value="-b"/>
                <arg value="@{sourcedir}"/>
            </exec>
        </sequential>
    </macrodef>
    <!-- END wix -->
    
    <!--
        Go architectures are amd64 and 386. Debian packages use amd64 and i386. RPM packages
        use x86_64 and i386. This next block does the conversion.
    -->
    <condition property="go.arch.is386">
        <equals arg1="${go.arch}" arg2="386"/>
    </condition>

    <target name="rpm-package.set-arch-386" if="go.arch.is386">
        <property name="rpm-package.arch" value="i386"/>
    </target>
    <target name="rpm-package.set-arch-amd64" unless="go.arch.is386">
        <property name="rpm-package.arch" value="x86_64"/>
    </target>
    <target name="rpm-package.set-arch" depends="rpm-package.set-arch-386,rpm-package.set-arch-amd64">
    </target>
    
    <!--
        Ant os.name is not very filename friendly (Windows, Linux, Mac OS X). This
        next block converts those to `windows`, `linux`, and `osx` and sets that
        as `archive.os-name`.
    -->
    <condition property="os-nice.name.isWindows">
        <os family="windows"/>
    </condition>
    <condition property="os-nice.name.isLinux">
        <equals arg1="${os.name}" arg2="Linux"/>
    </condition>
    <condition property="os-nice-name.isOSX">
        <equals arg1="${os.name}" arg2="Mac OS X"/>
    </condition>
    <target name="archive.set-os-name-windows" if="os-nice.name.isWindows">
        <property name="archive.os-name" value="windows"/>
    </target>
    <target name="archive.set-os-name-linux" if="os-nice.name.isLinux">
        <property name="archive.os-name" value="linux"/>
    </target>
    <target name="archive.set-os-name-osx" if="os-nice.name.isOSX">
        <property name="archive.os-name" value="osx"/>
    </target>
    <target name="archive.set-os-name" depends="archive.set-os-name-windows,archive.set-os-name-linux,archive.set-os-name-osx">
        <echo message="For os.name ${os.name} picked ${archive.os-name}"/>
    </target>
    
    <target name="munin-agent.go-get-dependencies" unless="munin-agent.skip-go-dependencies">
        <gpm deps="../goagent/godeps"/>
    </target>

    <target name="munin-agent-service.go-get-dependencies" depends="munin-agent.go-get-dependencies" unless="munin-agent.skip-go-dependencies">
        <gpm deps="../goagent/godeps-windows"/>
    </target>

    <property name="munin-agent.build-service-out" value="${build.dir}/mongodb-mms-munin-agent-service.exe"/>
    <target name="munin-agent.build-service" depends="munin-agent-service.go-get-dependencies,build.dir.make"
            if="os-nice.name.isWindows">
        <go-build sourcedir="../goagent/src"
                  version="${munin-agent.version}"
                  versionfile="/mongodb.com/munin-agent/components/version.go"
                  mainfile="/mongodb.com/munin-agent/munin-agent-service.go"
                  destfile="${munin-agent.build-service-out}"
                  tags="${go.tags.sasl}"/>
    </target>
    
    <!--
        Create a Windows Installer Packaged Munin Agent
        
        Prerequisites:
        wix - Available for download at http://wix.codeplex.com
        golang - `GOROOT` must be set or passed in as `go.root`
        
        Parameters:
        munin-agent.version (required)
        munin-agent.package-version (required) - The number of times this `munin-agent.version` has been packaged
        go.arch (optional) - `amd64` (default) or `386`
    -->
    <target name="munin-agent.create-msi" depends="munin-agent.build-service,archive.set-os-name,rpm-package.set-arch">
        <property name="munin-agent.create-msi.filename"
                  value="mongodb-mms-munin-agent-${munin-agent.version}-${munin-agent.package-version}.${archive.os-name}_${rpm-package.arch}"/>

        <property name="munin-agent.create-msi.temp-dir" value="${build.dir}/wix-temp" />
        <property name="munin-agent.create-msi.temp-dir-agent"
                  value="${munin-agent.create-msi.temp-dir}/${munin-agent.create-msi.filename}"/>

        <delete dir="${munin-agent.create-msi.temp-dir-agent}"/>
        <mkdir dir="${munin-agent.create-msi.temp-dir-agent}"/>

        <copy file="${munin-agent.build-service-out}" todir="${munin-agent.create-msi.temp-dir-agent}"/>

        <wix-build localefile="munin-agent/msi/munin-agent.en-us.wxl"
                   packagefile="${build.dir}/${munin-agent.create-msi.filename}.msi"
                   objectdir="${build.dir}/wix-objects"
                   archivedir="${munin-agent.create-msi.temp-dir-agent}"
                   sourcedir="munin-agent/msi">
            <sourcefiles>
                <arg value="munin-agent/msi/munin-agent.wxs"/>
            </sourcefiles>
        </wix-build>
    </target>
</project>
